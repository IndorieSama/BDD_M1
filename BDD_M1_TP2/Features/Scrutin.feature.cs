// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BDD_M1_TP2.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CalculDuVainqueurAuPremierTourFeature : object, Xunit.IClassFixture<CalculDuVainqueurAuPremierTourFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Scrutin.feature"
#line hidden
        
        public CalculDuVainqueurAuPremierTourFeature(CalculDuVainqueurAuPremierTourFeature.FixtureData fixtureData, BDD_M1_TP2_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Calcul du vainqueur au premier tour", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Un candidat obtient plus de 50% des voix au premier tour")]
        [Xunit.TraitAttribute("FeatureTitle", "Calcul du vainqueur au premier tour")]
        [Xunit.TraitAttribute("Description", "Un candidat obtient plus de 50% des voix au premier tour")]
        public virtual void UnCandidatObtientPlusDe50DesVoixAuPremierTour()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Un candidat obtient plus de 50% des voix au premier tour", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 3
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidat",
                            "Votes"});
                table1.AddRow(new string[] {
                            "Alice",
                            "60"});
                table1.AddRow(new string[] {
                            "Bob",
                            "30"});
                table1.AddRow(new string[] {
                            "Claire",
                            "10"});
#line 4
        testRunner.Given("un scrutin clôturé avec les votes suivants :", ((string)(null)), table1, "Given ");
#line hidden
#line 9
        testRunner.When("je calcule le résultat du scrutin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
        testRunner.Then("le vainqueur est \"Alice\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidat",
                            "Votes",
                            "Pourcentage"});
                table2.AddRow(new string[] {
                            "Alice",
                            "60",
                            "60%"});
                table2.AddRow(new string[] {
                            "Bob",
                            "30",
                            "30%"});
                table2.AddRow(new string[] {
                            "Claire",
                            "10",
                            "10%"});
#line 11
        testRunner.And("les résultats sont :", ((string)(null)), table2, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Aucun candidat n’obtient plus de 50%, second tour nécessaire")]
        [Xunit.TraitAttribute("FeatureTitle", "Calcul du vainqueur au premier tour")]
        [Xunit.TraitAttribute("Description", "Aucun candidat n’obtient plus de 50%, second tour nécessaire")]
        public virtual void AucunCandidatNObtientPlusDe50SecondTourNecessaire()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Aucun candidat n’obtient plus de 50%, second tour nécessaire", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 17
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidat",
                            "Votes"});
                table3.AddRow(new string[] {
                            "Alice",
                            "40"});
                table3.AddRow(new string[] {
                            "Bob",
                            "35"});
                table3.AddRow(new string[] {
                            "Claire",
                            "25"});
#line 18
        testRunner.Given("un scrutin clôturé avec les votes suivants :", ((string)(null)), table3, "Given ");
#line hidden
#line 23
        testRunner.When("je calcule le résultat du scrutin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 24
        testRunner.Then("aucun vainqueur n’est désigné", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidat"});
                table4.AddRow(new string[] {
                            "Alice"});
                table4.AddRow(new string[] {
                            "Bob"});
#line 25
        testRunner.And("un second tour est lancé entre :", ((string)(null)), table4, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Second tour désigne un vainqueur")]
        [Xunit.TraitAttribute("FeatureTitle", "Calcul du vainqueur au premier tour")]
        [Xunit.TraitAttribute("Description", "Second tour désigne un vainqueur")]
        public virtual void SecondTourDesigneUnVainqueur()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Second tour désigne un vainqueur", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 30
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidat",
                            "Votes"});
                table5.AddRow(new string[] {
                            "Alice",
                            "45"});
                table5.AddRow(new string[] {
                            "Bob",
                            "55"});
#line 31
      testRunner.Given("un deuxième tour entre :", ((string)(null)), table5, "Given ");
#line hidden
#line 35
      testRunner.When("je calcule le résultat du scrutin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
      testRunner.Then("le vainqueur est \"Bob\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Égalité parfaite au deuxième tour")]
        [Xunit.TraitAttribute("FeatureTitle", "Calcul du vainqueur au premier tour")]
        [Xunit.TraitAttribute("Description", "Égalité parfaite au deuxième tour")]
        public virtual void EgaliteParfaiteAuDeuxiemeTour()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Égalité parfaite au deuxième tour", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 38
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidat",
                            "Votes"});
                table6.AddRow(new string[] {
                            "Alice",
                            "50"});
                table6.AddRow(new string[] {
                            "Bob",
                            "50"});
#line 39
    testRunner.Given("un deuxième tour entre :", ((string)(null)), table6, "Given ");
#line hidden
#line 43
    testRunner.When("je calcule le résultat du scrutin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 44
    testRunner.Then("aucun vainqueur ne peut être déterminé", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Égalité entre le 2e et le 3e candidat au premier tour")]
        [Xunit.TraitAttribute("FeatureTitle", "Calcul du vainqueur au premier tour")]
        [Xunit.TraitAttribute("Description", "Égalité entre le 2e et le 3e candidat au premier tour")]
        public virtual void EgaliteEntreLe2EEtLe3ECandidatAuPremierTour()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Égalité entre le 2e et le 3e candidat au premier tour", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 46
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidat",
                            "Votes"});
                table7.AddRow(new string[] {
                            "Alice",
                            "40"});
                table7.AddRow(new string[] {
                            "Bob",
                            "30"});
                table7.AddRow(new string[] {
                            "Claire",
                            "30"});
#line 47
    testRunner.Given("un scrutin clôturé avec les votes suivants :", ((string)(null)), table7, "Given ");
#line hidden
#line 52
    testRunner.When("je calcule le résultat du scrutin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 53
    testRunner.Then("aucun vainqueur n’est désigné", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidat"});
                table8.AddRow(new string[] {
                            "Alice"});
                table8.AddRow(new string[] {
                            "Bob"});
                table8.AddRow(new string[] {
                            "Claire"});
#line 54
    testRunner.And("un second tour est lancé entre :", ((string)(null)), table8, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Vote blanc empêche un candidat d’atteindre 50%")]
        [Xunit.TraitAttribute("FeatureTitle", "Calcul du vainqueur au premier tour")]
        [Xunit.TraitAttribute("Description", "Vote blanc empêche un candidat d’atteindre 50%")]
        public virtual void VoteBlancEmpecheUnCandidatDAtteindre50()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Vote blanc empêche un candidat d’atteindre 50%", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 60
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidat",
                            "Votes"});
                table9.AddRow(new string[] {
                            "Alice",
                            "49"});
                table9.AddRow(new string[] {
                            "Bob",
                            "30"});
                table9.AddRow(new string[] {
                            "Blanc",
                            "21"});
#line 61
    testRunner.Given("un scrutin clôturé avec les votes suivants :", ((string)(null)), table9, "Given ");
#line hidden
#line 66
    testRunner.When("je calcule le résultat du scrutin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 67
    testRunner.Then("aucun vainqueur n’est désigné", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidat"});
                table10.AddRow(new string[] {
                            "Alice"});
                table10.AddRow(new string[] {
                            "Bob"});
#line 68
    testRunner.And("un second tour est lancé entre :", ((string)(null)), table10, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CalculDuVainqueurAuPremierTourFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CalculDuVainqueurAuPremierTourFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
